/*
 * Copyright (C) 2004-2009 Institute for Computational Biomedicine,
 *                         Weill Medical College of Cornell University
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package textractor.tools;

import edu.mssm.crover.cli.CLI;
import it.unimi.dsi.mg4j.util.MutableString;
import textractor.util.ProcessDirectory;
import textractor.util.Tally;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Created by IntelliJ IDEA.
 * User: campagne Date: Oct 22, 2003 Time: 4:58:38 PM
 * To change this template use Options | File Templates.
 */
public final class FindTerms {
    private String termTag;
    private boolean markTerms;
    private String exclusionListFilename;
    private int maxKw;
    private boolean verbose;
    private boolean generateXml;
    private List<String> exclusionList;

    public FindTerms() {
        super();
        generateXml = true;
    }

    public void run(final String[] args) throws IOException {
        termTag = CLI.getOption(args, "-tag", "term");
        markTerms = CLI.isKeywordGiven(args, "-mark", false);
        exclusionListFilename = CLI.getOption(args, "-e", "exclusion-list.txt");
        generateXml = CLI.isKeywordGiven(args, "-xml", false);

        maxKw = CLI.getIntOption(args, "-n", 50);
        verbose = CLI.isKeywordGiven(args, "-v", false);

        final ProcessDirectory processor = new ProcessDirectory(args, ".txt") {
            @Override
	    public void processFile(final Reader reader, final String input,
                    final String output) throws IOException {
                findTerms(input, output);
            }
        };
        processor.setOutputFileExtension(".txt");
        processor.process();
    }

    public void findTerms(final String input_fn, final String output_fn)
        throws IOException {
        final String delimiters = " '`,\"\\[\\]()"; // This is obsolete.

        readExclusionList(exclusionListFilename);
        final ReaderMaker maker = new ReaderMaker(new File(input_fn));

        final Tally tally = new Tally(delimiters);
        tally.tallyKeywords(maker);
        final String[] words = tally.findHighestFrequencyKeywords(maxKw);

        final List<String> allWords = Arrays.asList(words);
        allWords.removeAll(exclusionList);

        if (verbose) {
            for (final String word : allWords) {
                System.out.println("word kept: " + word);
            }
        }

        if (markTerms) { // mark terms within <term> tags.
            if (verbose) {
                System.err.println("Marking up terms, output goes to "
                        + output_fn);
            }
            final BufferedReader br = maker.getReader();
            String line = null;
            MutableString input = new MutableString();
            while ((line = br.readLine()) != null) {
                input.append(line);
                input.append('\n');
            }

            for (final String term : allWords) {
                input = markTerm(input, term, termTag);
            }

            final File output = new File(output_fn);
            final FileWriter fw = new FileWriter(output);
            fw.write(input.toString());
            fw.write('\n');
            fw.flush();
            fw.close();
        }
        if (verbose) {
            System.out.println("done.");
        }

    }

    private void readExclusionList(final String filename)
            throws IOException {

        final BufferedReader br =
            new BufferedReader(new FileReader(new File(filename)));
        String line = null;
        exclusionList = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            exclusionList.add(line.trim()); // one word per line, added to
                                            // exclusion list
        }
        exclusionList.add(".\002"); // add this to the list. It is generated by
                                    // the mg sentence splitting _process.
    }

    private MutableString markTerm(final MutableString input,
            final String term, final String termTag) {
        final String replace2 =
                (generateXml ? " <" : " ") + termTag
                + (generateXml ? ">" : " ") + term
                + (generateXml ? "</" : " ") + termTag
                + (generateXml ? "> " : " ");

        return input.replace(term, replace2);
    }

    public static void main(final String[] args) throws IOException {
        final FindTerms ft = new FindTerms();
        ft.run(args);
    }
}
