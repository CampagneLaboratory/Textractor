/*
 * Copyright (C) 2004-2009 Institute for Computational Biomedicine,
 *                         Weill Medical College of Cornell University
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package textractor.tools.genbank;

import com.martiansoftware.jsap.JSAPException;
import edu.mssm.crover.cli.CLI;
import org.apache.commons.configuration.ConfigurationException;
import textractor.tools.BuildDocumentIndexFromHTMLArticles;

import java.io.IOException;
import java.io.OutputStreamWriter;
import java.lang.reflect.InvocationTargetException;

/**
 * User: Fabien Campagne
 * Date: Oct 17, 2004
 * Time: 1:19:53 PM
 */
public final class BuildDocumentIndexFromGenbankFiles extends BuildDocumentIndexFromHTMLArticles {
    private String acOrganismFilename;

    public BuildDocumentIndexFromGenbankFiles(final String[] args, final String basename, final boolean stemming) {
        super(args, basename, stemming);
        final String acOrganismFilename = CLI.getOption(args, "-ac-org", null);
        if (acOrganismFilename != null) {
            System.out.println("Option -ac-org detected. Accession and organism data will be appended to "+acOrganismFilename);
        }
        setAcOrganismFilename(acOrganismFilename);

    }

    public void setAcOrganismFilename(final String filename) {
        this.acOrganismFilename = filename;
    }


    public BuildDocumentIndexFromGenbankFiles(final String basename) {
        super(basename);
    }

    public BuildDocumentIndexFromGenbankFiles(final String basename, final boolean stemming) {
        super(basename, stemming);
    }

    @Override
    public int serializeTextSourceToWriter(final OutputStreamWriter writer, final int chunkSize) throws IOException {
        final GenbankConversionProcessDirectory genbankConversionProcessDirector =
                new GenbankConversionProcessDirectory(args, writer, acOrganismFilename);

        genbankConversionProcessDirector.setParserFeedBackLevel(parserFeedBackLevel);
        genbankConversionProcessDirector.process();
        return genbankConversionProcessDirector.getTotalSencenceCount();
    }


    public static void main(final String[] args) throws NoSuchMethodException, IllegalAccessException, ConfigurationException, IOException, JSAPException, InvocationTargetException, ClassNotFoundException, InstantiationException {
        if (CLI.isKeywordGiven(args, "-help")) {
            final String helpMessage=" usage: index-db-est-nulls -basename basename (-d directory | -i filename) [-ac-org filename]\n" +
                               "       -basenane The name to use as base when constructing filename for components of the full text index (e.g., use -basename genbank). \n"+
                               "       -d This directory contains files to be processed. Files must end in .seq.gz or .seq\n"+
                               "       -ext Extension of the files in the directory. Files that match will be processed.\n"+
                               "       -i To process single dbEST files. The files must end in .seq.gz or .seq\n"+
                               "       -ac-org The file will be filled with accession code organism data (tab delimited) as files are processed. \n"+
                               "        Please note that lines are appended to this file. It is your responsability to erase the file when required.\n" +
                               "        DO NOT EDIT this file, as the order of the lines in the file must match the order of the documents in the index.\n"+
                               "        If this condition is not met, tissues will be associated to accession code/organism pairs at random.";


            System.out.println(helpMessage);
            System.exit(0);
        }
        final String basename = CLI.getOption(args, "-basename", null);
        final BuildDocumentIndexFromGenbankFiles docindexer = new BuildDocumentIndexFromGenbankFiles(args, basename, false);
        final boolean parenthesesAreWords = CLI.isKeywordGiven(args, "-indexParentheses");
        docindexer.getIndexerOptions().setParenthesesAreWords(parenthesesAreWords);
        docindexer.process(args);
        System.exit(0);
    }
}
